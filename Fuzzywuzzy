#Fuzzy String Matching, also called Approximate String Matching, is the process of finding strings that approximatively match a given pattern.

#Fuzzy String Matching can have different practical applications. Typical examples are spell-checking, text re-use detection (the politically correct way of calling plagiarism detection), spam filtering, as well as several applications in the bioinformatics domain, e.g. matching DNA sequences.

# fuzzywuzzy, a Python library for Fuzzy String Matching.

#FuzzyWuzzy has been developed and open-sourced by SeatGeek, a service to find sport and concert tickets. Their original use case, as discussed in their blog, was the problem given by the many different ways of labelling the same event, adding or hiding location, dates, venue, etc. This problem is also arising with different entities like persons or companies.

#The main modules in FuzzyWuzzy are called fuzz, for string-to-string comparisons, and process to compare a string with a list of strings.

from fuzzywuzzy import fuzz
from fuzzywuzzy import  process

#In order to calculate a similarity score between two strings, we can use the methods ratio() or partial_ratio():

# check the similarity score of string between ratio() and partial ratio()

print(fuzz.ratio("ACME Factory", "ACME Factory Inc."))
print(fuzz.partial_ratio("ACME Factory", "ACME Factory Inc."))

#more example

print(fuzz.ratio("Abhijit Manepatil", "Abhijit C Manepatil"))
print(fuzz.partial_ratio("Abhijit Manepatil", "Abhijit C Manepatil"))

#Process

query="Abhijit Manepatil"
choices=["Abhijit C Manepatil", "Abhi Manepatil", "Abhijit Mane"]
# Get the list of matches by score default limit is 5
print(process.extract(query,choices))

#Best
print("Best: ",process.extractBests(query,choices))

#only one

print("only one: ", process.extractOne(query, choices))

